interface IXC20 {
    query name() Str;
    query symbol() Str;
    query decimals() u8;
    query total_supply() u128;
    query balance_of(account: AccountID) u128;
    tx send(to: AccountID, amount: u128);
    tx transferFrom(from: AccountID, to: AccountID, amount: u128);
    tx approve(spender: AccountID, amount: u128);
    account_scoped map balances[account: AccountID] => amount: u128;
}

object SimpleToken {
    var name: Str;
    var symbol: Str;
    var decimals: u8;
    var admin: AccountID;
    var total_supply: u128;
    map allowances[owner: AccountID, spender: AccountID] => amount: u128;

    tx mint(to: AccountID, amount: u128) {
        supply.add(to, amount);
        balances.add(to, amount);
    }
}

impl IXC20 for SimpleToken {
    account_scoped map balances[account: AccountID] => amount: u128;

    query name() Str {
        name
    }

    query symbol() Str {
        symbol
    }

    query decimals() u8 {
        decimals
    }

    query total_supply() u128 {
        total_supply
    }
    
    query balance_of(account: AccountID) u128 {
        balances.get(account)
    }

    tx send(to: AccountID, amount: u128) {
        balances.safe_sub(msg.sender, amount);
        balances.add(to, amount);
    }

    tx transferFrom(from: AccountID, to: AccountID, amount: u128) {
        allowances.safe_sub(from, msg.sender, amount);
        balances.safe_sub(from, amount);
        balances.add(to, amount);
    }

    tx approve(spender: AccountID, amount: u128) {
        allowances.add(msg.sender, spender, amount);
    }
}

test test_ixc20 {
    let admin = test.create_test_account();
    let bob = test.create_test_account();
    let alice = test.create_test_account();
    let token = as admin { create_account(SimpleToken)) };
    let simple_token = as(admin, token.mint(bob, 100));
    assert(simple_token.IXC20.balance_get(bob) == 100);
    assert(simple_token.IXC20.balance_get(alice) == 0);
    as bob { simple_token.IXC20.send(alice, 50)) };
    assert(simple_token.IXC20.balance_get(bob) == 50);
    assert(simple_token.IXC20.balance_get(alice) == 50);
}
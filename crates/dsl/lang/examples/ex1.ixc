interface BankAPI {
   struct Coin {

       denom: Str,
       amount: u128,
   }

   event EventTransfer {
       from: AccountID,
       to: AccountID,
       denom: Str,
       amount: u128,
   }

   tx send(key to: AccountID, coins: []Coin) emits(EventTransfer);

   query get_balance(account: AccountID, denom: Str) u128;

   scoped map balances[account: AccountID, denom: Str] => amount: U128Accumulator;
}

object Bank {
   map balances[account: AccountID, denom: Str] => amount: U128Accumulator;
   map supply[denom: Str] => amount: U128Accumulator;
   map denom_admins[denom: Str] => admin: AccountID;
   client block_info: BlockInfoAPI;
}

// an implementation of the Bank API for the Bank handler
impl BankAPI for Bank {
   tx send(to: AccountID, coins: []Coin) {
       from = msg.sender;
       for coin in coins {
           denom = coin.denom;
           amount = coin.amount;
           balances.safe_sub(from, denom, amount);
           balances.add(to, denom, amount);
           // emit(EventTransfer { from, to, denom, amount }); // TODO support struct/event constructors
       }
   }

   query get_balance(account: AccountID, denom: Str) u128 {
       balances.get(account, denom)
   }
}

interface IXC20 {
    query name() Str;
    query symbol() Str;
    query decimals() u8;
    query total_supply() u128;
    query balance_of(account: AccountID) u128;
    tx send(to: AccountID, amount: u128);
    tx transferFrom(from: AccountID, to: AccountID, amount: u128);
    tx approve(spender: AccountID, amount: u128);
    scoped map balances[account: AccountID] => amount: u128;
}

object SimpleToken {
    var admin: AccountID;
}

impl IXC20 for SimpleToken {
    scoped map balances[account: AccountID] => amount: u128;
}

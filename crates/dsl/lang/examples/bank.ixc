interface BankAPI {
   struct Coin {
       denom: Str,
       amount: u128,
   }

   event EventTransfer {
       from: AccountID,
       to: AccountID,
       denom: Str,
       amount: u128,
   }

   event EventBurn {
       from: AccountID,
       denom: Str,
       amount: u128,
   }

   tx send(key to: AccountID, coins: []Coin) emits(EventTransfer);
   tx burn(key from: AccountID, coins: []Coin) emits(EventBurn);

   query get_balance(account: AccountID, denom: Str) u128;
}

interface BlockInfoAPI {
    query block_time() Time;
}

object Bank {
   account_scoped map balances[account: AccountID, denom: Str] => amount: U128Accumulator;
   map supply[denom: Str] => amount: U128Accumulator;
   map denom_admins[denom: Str] => admin: AccountID;
   client block_info: BlockInfoAPI;
}

// an implementation of the Bank API for the Bank handler
impl BankAPI for Bank {
   tx send(to: AccountID, coins: []Coin) {
       from = msg.sender;
       for coin in coins {
           denom = coin.denom;
           amount = coin.amount;
           balances.safe_sub(from, denom, amount);
           balances.add(to, denom, amount);
           // emit(EventTransfer { from, to, denom, amount }); // TODO support struct/event constructors
       }
   }

   query get_balance(account: AccountID, denom: Str) u128 {
       balances.get(account, denom)
   }
}

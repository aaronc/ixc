File = items:Item*

Item = Interface | Object | Impl

Interface = 'interface' name:'#ident' '{'
    items:InterfaceItem*
'}'

InterfaceItem = InterfaceFn | Struct | Event | MapCollection | VarCollection

InterfaceFn = sig:FnSignature ';'

Object = 'object' name:'#ident' '{'
    items:ObjectItem*
'}'

ObjectItem = MapCollection | VarCollection | Client | ImplFn

FnSignature = typ:FnType name:'#ident' '(' args:FnParamList ')' events:FnEvents? ret:FnRet?

FnParamList = args:FnParam*

FnType = 'tx' | 'query' | 'pure'

FnParam = key:'key'? name:'#ident' ':' modifier:FnParamModifier? typ:Type ','
FnParamModifier = 'mut' | 'ref' | 'transfer'

FnEvents = 'emits' '(' events:Type* ')'

FnRet = ret:'#ident'

Type = TypeIdent | TypeArray

TypeIdent = name:'#ident'

TypeArray = typ:Type '[' ']'

Struct = 'struct' name:'#ident' '{' fields:StructField* '}'

StructField = name:'#ident' ':' typ:Type ','

Event = 'event' name:'#ident' '{' fields:StructField* '}'

MapCollection = scoped:'account_scoped'? 'map' name:'#ident' key_fields:MapKeyFields value_fields:MapValueFields? ';'
VarCollection = 'var' name:'#ident' ':' typ:Type ';'
MapKeyFields = '[' fields:MapField* ']'
MapValueFields = '=>' fields:MapField*
MapField = name:'#ident' ':' typ:Type ','

Client = 'client' name:'#ident' ':' types:ClientTypes ';'
ClientTypes = types:ClientType*
ClientType = typ:Type ','

Impl = 'impl' name:'#ident' for:ImplFor '{' items:ImplItem* '}'
ImplFor = 'for' name:'#ident'
ImplItem = ImplFn | MapCollection | VarCollection
ImplFn = sig:FnSignature block:FnBlock
FnBlock = '{' statements:Stmt* '}'
Stmt = StmtExpr
StmtExpr = expr:Expr

Expr = ExprParen |
    NameExpr |
    ExprCall
NameExpr = name:'#ident'
ExprParen = '(' expr:Expr ')'
FieldExpr = expr:Expr '.' name:'#ident'
ExprCall = expr:Expr args:ArgList
ExprBinary = op:BinaryOp exprs:Expr*
Rhs = expr:Expr
BinaryOp = '.' | '='
ArgList = '(' args:Arg* ')'
Arg = modifier:FnParamModifier? expr:Expr ','
ExprConstruct = name:'#ident' fields:ExprConstructFieldList?
ExprConstructFieldList = '{' fields:ExprConstructField* '}'
ExprConstructField = name:'#ident' ':' expr:Expr? ','

ForStmt = 'for' pat:'#ident' 'in' iterable:Expr block:FnBlock